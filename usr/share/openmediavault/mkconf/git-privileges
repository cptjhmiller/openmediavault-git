#!/bin/sh
#
# @license      http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author       Ian Moore <imooreyahoo@gmail.com>
# @author       Marcel Beck <marcel.beck@mbeck.org>
# @author       OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright    Copyright (c) 2011-2012 Ian Moore
# @copyright    Copyright (c) 2012 Marcel Beck
# @copyright    Copyright (c) 2013-2014 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

OMV_GIT_AUTHZ=${OMV_GIT_AUTHZ:-"/etc/git/authz"}

# Get Repo root directory
reporootdir=$(omv_config_get "//services/git/repository-root")

# Just exit if service is disabled
if [ "$(omv_config_get "//services/git/enable")" = "0" ]; then
    exit 0
fi

# Wipe all acl entries from reporoot recursively except the default (www-data)
setfacl -b -R $reporootdir

# Chmod repo root directory so users can "cd" into repos
chmod o=x $reporootdir

#########################################
# Create a git folder and symlinks to repos if homedirectories and symlinks are enabled
#########################################
homedirenabled=$(omv_config_get "//system/usermanagement/homedirectory/enable")
if [ "$homedirenabled" = "1" ]; then
    homedirenabled=$(omv_config_get "//services/git/symlinks-enable")
fi

homedirroot=$(omv_get_sharedfolder_path $(omv_config_get "//system/usermanagement/homedirectory/sharedfolderref"))
if [ "$homedirenabled" = "1" ]; then
    index=$(omv_config_get_count "//system/usermanagement/users/user")
    while [ ${index} -gt 0 ]
    do
        user=$(omv_config_get "//system/usermanagement/users/user[position()=${index}]/name")
        usergitdir=$homedirroot/$user/git

        if [ ! -d "$usergitdir" ]; then
            mkdir $usergitdir
            chown $user $usergitdir
        else
            # Loop through files and delete all symlinks
            for f in $usergitdir/*
            do
                if [ -L "$f" ]; then
                    rm $f
                fi
            done
        fi
        index=$(( ${index} - 1 ))
    done
fi

# Add groups. Yes, I do not like xpath. If there is a simpler way
# to do this without having to rely on /etc/group, I would love to
# hear it.
#
# E.g. contains("ftp") would match "ftp-banned" and "ftpadmins" and
# this xmlstarlet/libxml/xpath installation doesn't seem to support
# ends-with()
#
echo '[groups]'>${OMV_GIT_AUTHZ}
index=$(omv_config_get_count "//system/usermanagement/groups/group")
while [ ${index} -gt 0 ]
do
    group=$(omv_config_get "//system/usermanagement/groups/group[position()=${index}]/name")
    members=$(grep "^${group}:" /etc/group | awk -F: '{ print $4 }' | sed -e s'/,\s*/, /g')

    echo "${group} = ${members}" >>${OMV_GIT_AUTHZ}
    index=$(( ${index} - 1 ))
done

# Allow read to all by default. Required for
# access to GitWeb
cat <<EOF >> ${OMV_GIT_AUTHZ}

[/]
* = r
EOF

# Add permitted users and groups to each repo
index=$(omv_config_get_count "//services/git/repos/repo")
while [ ${index} -gt 0 ]
do
    #Get repo directory for ACL setting
    reponame=$(omv_config_get "//services/git/repos/repo[position()=${index}]/name")
    repodir=$reporootdir/$reponame

    echo '' >>${OMV_GIT_AUTHZ}

    # Get the repository reference and path
    reporef=$(omv_config_get "//services/git/repos/repo[position()=${index}]/uuid")

    # Repo name
    xmlstarlet sel -t -m "//services/git/repos/repo[position()=${index}]" \
      -v "concat('[',name,':/]')" \
      ${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${OMV_GIT_AUTHZ}

    # Repo default privileges
    dpriv=$(omv_config_get "//services/git/repos/repo[position()=${index}]/default-access")

    priv=''
    case ${dpriv} in
    "read-only")
        priv='r';;
    "write")
        priv='rw';;
    esac

    echo "* = ${priv}" >>${OMV_GIT_AUTHZ}

#########################################
# Set default user acl privileges for repo directory
#########################################
    userindex=$(omv_config_get_count "//system/usermanagement/users/user")
    while [ ${userindex} -gt 0 ]
    do
        user=$(omv_config_get "//system/usermanagement/users/user[position()=${userindex}]/name")
        case ${dpriv} in
        "read-only")
            setfacl -R -m u:$user:rx $repodir
            ;;
        "write")
            setfacl -R -m u:$user:rwx $repodir
            ;;
        esac
        if [ "$homedirenabled" = "1" ] && ([ "$dpriv" = "read-only" ] || [ "$dpriv" = "write" ]); then
            ln -sn $repodir $homedirroot/$user/git
        fi
        userindex=$(( ${userindex} - 1 ))
    done

#########################################
# Set default group acl privileges for repo directory
#########################################
    groupindex=$(omv_config_get_count "//system/usermanagement/groups/group")
    while [ ${groupindex} -gt 0 ]
    do
        group=$(omv_config_get "//system/usermanagement/groups/group[position()=${groupindex}]/name")
        case ${dpriv} in
        "read-only")
            setfacl -R -m g:$group:rx $repodir
            ;;
        "write")
            setfacl -R -m g:$group:rwx $repodir
            ;;
        esac

        groupindex=$(( ${groupindex} - 1 ))
    done

#########################################
# Check user/group privileges for repo
# Only if default privilege level is not write
#########################################
    if ! [ "$dpriv" = "write" ]; then
        # Get repository user privileges
        privileges=$(xmlstarlet sel -t -m "//services/git/repos/repo[uuid='${reporef}']/privileges/privilege[type='user']" \
          -v "concat(perms,'|',name)" -n \
          ${OMV_CONFIG_FILE} | xmlstarlet unesc)

        for privilege in ${privileges}
        do
            perm=''
            perms=${privilege%|*}
            name=${privilege#*|}
            if [ $(getent passwd $name) ]; then
                # Append user to list
                case ${perms} in
                    5)
                        perm='r'
                        setfacl -R -m u:$name:rx $repodir # Set folder ACL for ssh use
                        ;;
                    7)
                        perm='rw'
                        setfacl -R -m u:$name:rwx $repodir # Set folder ACL for ssh use
                        ;;
                esac
                # If userhomedirectories are enabled and repo symlink has not been made then make it
                if [ "$homedirenabled" = "1" ] && [ ! -L $homedirroot/$name/git/$reponame ] && ([ ${perms} = 5 ] || [ ${perms} = 7 ]); then
                   ln -sn $repodir $homedirroot/$name/git
                fi
                echo "${name} = ${perm}" >>${OMV_GIT_AUTHZ}
            fi
        done

        # Get repository group privileges
        privileges=$(xmlstarlet sel -t -m "//services/git/repos/repo[uuid='${reporef}']/privileges/privilege[type='group']" \
          -v "concat(perms,'|',name)" -n \
          ${OMV_CONFIG_FILE} | xmlstarlet unesc)

        for privilege in ${privileges}
        do
            perm=''
            perms=${privilege%|*}
            name=${privilege#*|}
            if [ $(getent group $name) ]; then
                # Append user to list
                case ${perms} in
                    5)
                        perm='r'
                        setfacl -R -m g:$name:rx $repodir # Set folder ACL for ssh use
                        ;;
                    7)
                        perm='rw'
                        setfacl -R -m g:$name:rwx $repodir # Set folder ACL for ssh use
                        ;;
                esac
                # Loop through members of the group and make symlinks to their folders
                usersofgroup=$(grep ^$name /etc/group | cut -f4 -d':' | sed s/,/\ /g)
                for user in $usersofgroup;
                do  # If userhomedirectories are enabled and repo symlink has not been made then make it
                    if [ "$homedirenabled" = "1" ] && [ ! -L $homedirroot/$user/git/$reponame ] && ([ ${perms} = 5 ] || [ ${perms} = 7 ]); then
                        ln -sn $repodir $homedirroot/$user/git
                    fi
                done
                echo "@${name} = ${perm}" >>${OMV_GIT_AUTHZ}
            fi
        done
    fi
    index=$(( ${index} - 1 ))
done

exit 0
